services:
  # 1. MongoDB Database (moved first as it's the foundation dependency)
  mongodb:
    image: mongo:latest
    container_name: wo-mongodb-dev
    restart: unless-stopped
    env_file:
      - ./.env.local
    ports:
      - "27017:27017"
    volumes:
      - mongo_data_dev:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # 2. Users Service (Development with Hot Reload)
  users-service:
    container_name: wo-users-service-dev
    build:
      context: .
      dockerfile: ./services/users/Dockerfile.dev
    restart: unless-stopped
    env_file: [./.env.local]
    environment:
      - DB_NAME=users_db
      - CGO_ENABLED=0
    ports:
      - "8081:8080" # Expose for direct access during development
    volumes:
      - ".:/app" # Mount entire project for hot reload
      - "/app/tmp" # Exclude tmp directory to avoid conflicts
      - "/app/vendor" # Exclude vendor directory for better performance
      - "go-mod-cache:/go/pkg/mod" # Cache Go modules
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health/ready",
        ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    develop:
      watch:
        - action: sync
          path: ./services/users
          target: /app/services/users
        - action: sync
          path: ./lib
          target: /app/lib
        - action: sync
          path: ./gen
          target: /app/gen
        - action: rebuild
          path: ./go.work

  # 3. Content Service (Development with Hot Reload)
  content-service:
    container_name: wo-content-service-dev
    build:
      context: .
      dockerfile: ./services/content/Dockerfile.dev
    restart: unless-stopped
    env_file: [./.env.local]
    environment:
      - DB_NAME=content_db
      - CGO_ENABLED=0
    ports:
      - "8082:8080" # HTTP API for direct access during development
      - "50052:50052" # gRPC server for internal service communication
    volumes:
      - ".:/app" # Mount entire project for hot reload
      - "/app/tmp" # Exclude tmp directory to avoid conflicts
      - "/app/vendor" # Exclude vendor directory for better performance
      - "go-mod-cache:/go/pkg/mod" # Cache Go modules
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health/ready",
        ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 45s
    develop:
      watch:
        - action: sync
          path: ./services/content
          target: /app/services/content
        - action: sync
          path: ./lib
          target: /app/lib
        - action: sync
          path: ./gen
          target: /app/gen
        - action: rebuild
          path: ./go.work

  # 4. Quiz Service (Development with Hot Reload)
  quiz-service:
    container_name: wo-quiz-service-dev
    build:
      context: .
      dockerfile: ./services/quiz/Dockerfile.dev
    restart: unless-stopped
    env_file: [./.env.local]
    environment:
      - DB_NAME=quiz_db
      - CGO_ENABLED=0
    ports:
      - "8083:8080" # Expose for direct access during development
    volumes:
      - ".:/app" # Mount entire project for hot reload
      - "/app/tmp" # Exclude tmp directory to avoid conflicts
      - "/app/vendor" # Exclude vendor directory for better performance
      - "go-mod-cache:/go/pkg/mod" # Cache Go modules
    depends_on:
      mongodb:
        condition: service_healthy
      content-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health/ready",
        ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s # Longer start period since it depends on content service
    develop:
      watch:
        - action: sync
          path: ./services/quiz
          target: /app/services/quiz
        - action: sync
          path: ./lib
          target: /app/lib
        - action: sync
          path: ./gen
          target: /app/gen
        - action: rebuild
          path: ./go.work

  # 5. Nginx: The API Gateway (depends on all backend services)
  nginx:
    image: nginx:stable-alpine
    container_name: wo-nginx-dev
    restart: unless-stopped
    ports: ["8080:80"]
    volumes:
      - "./nginx:/etc/nginx/conf.d:ro"
      - "./monitoring:/etc/nginx/html/monitoring:ro"
    depends_on:
      users-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
      quiz-service:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health-check",
        ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  mongo_data_dev:
  go-mod-cache: # Shared Go module cache for faster builds
