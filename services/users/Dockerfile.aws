# Production Dockerfile for Users Service - Optimized for AWS ECS
FROM golang:1.24.5-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go.work and download dependencies
COPY go.work go.work.sum ./
COPY lib/go.mod lib/go.sum ./lib/
COPY services/users/go.mod services/users/go.sum ./services/users/
COPY gen/go.mod gen/go.sum ./gen/

# Download dependencies
RUN go work sync

# Copy source code
COPY lib/ ./lib/
COPY gen/ ./gen/
COPY services/users/ ./services/users/

# Build the application
WORKDIR /app/services/users
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o /app/users-service \
    ./cmd/main.go

# Production stage
FROM scratch

# Copy CA certificates for HTTPS requests (needed for AWS APIs)
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary
COPY --from=builder /app/users-service /users-service

# Create non-root user (for security)
USER 65534:65534

# Expose port
EXPOSE 8081

# Health check for AWS ALB
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/users-service", "-health-check"] || exit 1

# Run the service
ENTRYPOINT ["/users-service"]
