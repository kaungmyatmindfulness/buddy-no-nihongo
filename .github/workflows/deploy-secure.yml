name: Deploy to Raspberry Pi

on:
  push:
    branches: [master, main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24.5"

      - name: Run tests
        run: |
          go work sync
          go test ./services/users/...
          go test ./services/content/...
          go test ./services/quiz/...

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [nginx, users, content, quiz]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'nginx' && './nginx' || format('./services/{0}', matrix.service) }}
          platforms: linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Raspberry Pi with Secrets
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_PORT }}
          script: |
            cd /opt/wise-owl

            # Pull latest code
            git pull origin master

            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Create Docker secrets (if using Swarm mode)
            if docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then
              echo "${{ secrets.JWT_SECRET }}" | docker secret create jwt_secret - 2>/dev/null || \
                (docker secret rm jwt_secret && echo "${{ secrets.JWT_SECRET }}" | docker secret create jwt_secret -)
              
              echo "${{ secrets.MONGO_USERNAME }}" | docker secret create mongo_username - 2>/dev/null || \
                (docker secret rm mongo_username && echo "${{ secrets.MONGO_USERNAME }}" | docker secret create mongo_username -)
              
              echo "${{ secrets.MONGO_PASSWORD }}" | docker secret create mongo_password - 2>/dev/null || \
                (docker secret rm mongo_password && echo "${{ secrets.MONGO_PASSWORD }}" | docker secret create mongo_password -)
            fi

            # Export variables for docker compose substitution
            export GITHUB_REPOSITORY="${{ github.repository }}"
            export DOMAIN="${{ secrets.DOMAIN }}"
            export MONGO_USERNAME="${{ secrets.MONGO_USERNAME }}"
            export MONGO_PASSWORD="${{ secrets.MONGO_PASSWORD }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export AUTH0_DOMAIN="${{ secrets.AUTH0_DOMAIN }}"
            export AUTH0_AUDIENCE="${{ secrets.AUTH0_AUDIENCE }}"

            # Update images
            docker compose -f docker-compose.prod.yml pull

            # Deploy with zero downtime
            docker compose -f docker-compose.prod.yml up -d --no-deps

            # Wait for health checks
            sleep 30

            # Verify deployment
            docker compose -f docker-compose.prod.yml ps
            ./prod.sh status

            # Cleanup
            docker image prune -f
