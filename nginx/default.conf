# FILE: nginx/default.conf
# This is the main configuration file for our Nginx API Gateway.

# The 'upstream' block defines a named group of servers. This allows us to
# reference our backend services by a simple name and adds flexibility for
# load balancing in the future.

upstream users_service {
    # 'users-service' is the hostname of the service, as defined in docker-compose.yml.
    # '8080' is the internal port the Go service listens on.
    server users-service:8080;
}

upstream content_service {
    server content-service:8080;
}

upstream quiz_service {
    server quiz-service:8080;
}

# The main server block that handles all incoming HTTP traffic.
server {
    # Nginx listens on port 80 inside the container.
    # The docker-compose.yml file maps this to port 80 on your host machine.
    listen 80;

    # Health check endpoint for nginx itself
    location /health-check {
        access_log off;
        return 200 '{"status": "healthy", "service": "Nginx API Gateway"}';
        add_header Content-Type application/json;
    }

    # Monitoring dashboard
    location /dashboard {
        root /etc/nginx/html;
        try_files /monitoring/dashboard.html =404;
        add_header Content-Type text/html;
    }

    # === Health Check Routes for Monitoring ===
    # Direct access to service health endpoints for monitoring tools
    location /api/v1/users/health {
        proxy_pass http://users_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/users/health/ {
        proxy_pass http://users_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/users/health/ready {
        proxy_pass http://users_service/health/ready;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/content/health {
        proxy_pass http://content_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/content/health/ {
        proxy_pass http://content_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/content/health/ready {
        proxy_pass http://content_service/health/ready;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/quiz/health {
        proxy_pass http://quiz_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/quiz/health/ {
        proxy_pass http://quiz_service/health/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/quiz/health/ready {
        proxy_pass http://quiz_service/health/ready;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # This handles requests to the root path (e.g., http://localhost/)
    location / {
        # For an API gateway, it's good practice to return an error or a
        # status message for unhandled paths.
        return 404 '{"status": "error", "message": "route not found"}';
        add_header Content-Type application/json;
    }

    # === Routing Rule for Users Service ===
    # Any request whose path starts with /api/v1/users/ will match this block.
    location /api/v1/users/ {
        # The 'proxy_pass' directive forwards the request to the defined upstream server.
        proxy_pass http://users_service;

        # These headers pass along important information about the original request
        # to our Go service, which is crucial for logging and security.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # === Routing Rule for Content Service ===
    location /api/v1/content/ {
        proxy_pass http://content_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # === Routing Rule for Quiz Service ===
    location /api/v1/quiz/ {
        proxy_pass http://quiz_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}